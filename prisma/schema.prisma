generator client {
  provider = "prisma-client-js"
}

/// Commented as it keeps generating TS files at prod
// generator custom_generator {
//   provider = "prisma-generator-fake-data"
//   /// by default, the file will be generated at `./prisma/fake-data.ts`
// }

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  fname    String   @db.VarChar(30)
  mname    String   @db.VarChar(30)
  lname    String   @db.VarChar(30)
  isOnline Boolean? @default(false)

  addr      String   @db.VarChar(255)
  cnum      String   @db.VarChar(50)
  emailaddr String   @db.VarChar(50)
  bdate     DateTime @db.Date
  rating    Int      @default(0) @db.TinyInt
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  type user_type

  login_username String @unique
  login_password String

  RefreshTokens  RefreshToken[]
  Schedules      Schedule[]
  MedicalRecords MedicalRecord[]

  @@unique([fname, mname, lname])
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      String
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Schedule {
  id       String         @id @default(uuid())
  state    schedule_state @default(Available)
  fromDate DateTime
  toDate   DateTime
  title    String
  desc     String         @default("")
  repeat   repeat         @default(None)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  Messages  Message[]
  Users     User[]
}

model Message {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  content    String    @db.VarChar(3000)
  scheduleId String?
  Schedule   Schedule? @relation(fields: [scheduleId], references: [id])

  @@index([scheduleId], map: "Message_scheduleId_fkey")
}

model Announcement {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  title     String
  content   String   @db.VarChar(3000)
}

model MedicalRecord {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id])
  content String
  userId  String
}

enum user_type {
  Student
  Teacher
  Guidance
  Clinic
  Admin
}

enum schedule_state {
  Available
  Pending
  Approved
  Ongoing
  Completed
}

enum repeat {
  None
  Daily
  Weekly
  Monthly
}
